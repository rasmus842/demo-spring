import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'io.freefair.lombok' version '8.13.1'
	id 'org.openapi.generator' version '7.0.1'
	id 'org.liquibase.gradle' version '2.2.0'
}

def liquibaseChangelog = 'db/changelog.yaml'

ext {
	env = project.getProperties().getOrDefault('env', 'dev')
	if (env != 'dev'
			&& (!project.hasProperty('dbUrl')
				|| !project.hasProperty('dbUser')
				|| !project.hasProperty('dbPassword'))) {
		throw new GradleException('If not in dev environment dbUrl, dbUser, and dbPassword properties must be set!')
	}
	dbUrl = project.getProperties().getOrDefault('dbUrl', 'jdbc:mysql://localhost:3306/spring-demo')
	dbUser = project.getProperties().getOrDefault('dbUser', 'spring-demo')
	dbPassword = project.getProperties().getOrDefault('dbPassword', 'spring-demo')
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = JavaVersion.VERSION_21
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}


dependencies {
	// Spring
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// openapi
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
	implementation 'io.swagger.core.v3:swagger-annotations:2.2.15'
	implementation 'io.swagger.core.v3:swagger-models:2.2.15'
	implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	implementation 'javax.validation:validation-api:2.0.1.Final'

	// db
	runtimeOnly 'com.mysql:mysql-connector-j'

	// liquibase
	liquibaseRuntime 'org.liquibase:liquibase-core:4.24.0'
	/*
	TODO: Try to make xml changelogs work?
	did not manage to make xml or groovy dsl work, using yaml instead
	liquibaseRuntime('org.liquibase:liquibase-groovy-dsl:4.0.0') {
		exclude group: "org.codehaus.groovy", module: "groovy"
		exclude group: "org.codehaus.groovy", module: "groovy-sql"
	}
	liquibaseRuntime 'org.apache.groovy:groovy:4.0.5'
	liquibaseRuntime 'org.apache.groovy:groovy-sql:4.0.5'
	*/
	liquibaseRuntime 'info.picocli:picocli:4.7.5'
	liquibaseRuntime 'org.yaml:snakeyaml:2.4'
	liquibaseRuntime 'com.mysql:mysql-connector-j'

	// tests
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testRuntimeOnly 'com.h2database:h2'

	// running tests using MySQL instead of h2
	testImplementation 'org.testcontainers:junit-jupiter:1.21.0'
	testImplementation 'org.testcontainers:mysql:1.21.0'
	testImplementation 'org.liquibase:liquibase-core:4.24.0'
}

sourceSets.main.java.srcDirs += "$projectDir/src/generated/java"

tasks.withType(Test).configureEach {
	useJUnitPlatform()
	systemProperty("spring.liquibase.changelog", "file:db/changelog.yaml")
}

tasks.register('mySqlTest', Test) {
	systemProperty("spring.profiles.active", "mySqlTest")
}

liquibase {
	activities {
		main {
			changelogFile liquibaseChangelog
			url dbUrl
			username dbUser
			password dbPassword
		}
	}
}

tasks.register('generateOpenApi', GenerateTask) {
	doFirst {
		delete "$projectDir/openapi-generator"
	}
	def generatedPackage = 'com.example.demo.generated'

    generatorName = "spring"
    inputSpec = "$rootDir/openapi_spec.yaml".toString()
    outputDir = "$projectDir/openapi-generator".toString()
	packageName = "$generatedPackage"
    apiPackage = "${generatedPackage}.api"
    modelPackage = "${generatedPackage}.model"
	invokerPackage = "${generatedPackage}.invoker"
    configOptions = [
			configPackage: "${generatedPackage}.config",

			// which imports and dependencies to use (// <default>)
			dateLibrary: "java8", // java8
			fullJavaUtil: "true", // false
			openApiNullable: "false", // true
			performBeanValidation: "true", // false
			useSpringBoot3: "true", // false - will use jakarta instead of javax

			// using swaggerUI for documentation
			annotationLibrary: "none", // swagger2
			documentationProvider: "none", // springdoc
			hideGenerationTimestamp: "true", // false

			// Pattern of api (// <default>)
			delegatePattern: "false", // false
			interfaceOnly: "true", // false
			skipDefaultInterface: "true", // false
			requestMappingMode: "none", // none/controller/api_interface
			unHandledException: "false", // false - useful for @ControllerAdvice
			useSpringController: "false" // false - @Controller on Api-class
    ]
}

tasks.register('copyOpenApi', Copy) {
	dependsOn 'generateOpenApi'
	doFirst {
		delete fileTree("$projectDir/src/generated").matching {
			include "**/*.java"
		}
	}
	from "$projectDir/openapi-generator/src/main"
	into "$projectDir/src/generated"
	include "**/*.java"
	exclude ".openapi-generator", "**/invoker", "**/config", "**/resources"
}

compileJava.dependsOn('copyOpenApi')

bootRun {
	args = ["--spring.profiles.active=${env}"]
}
